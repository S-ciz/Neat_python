import numpy as np
import pygame
import random
from collections import namedtuple, defaultdict
import pickle

# Define Constants
GRID_SIZE = 10
CELL_SIZE = 30
POPULATION_SIZE = 50
GENERATIONS = 100
INITIAL_MUTATION_RATE = 0.075
MAX_STEPS = 500  # Maximum steps allowed per game
COMPATIBILITY_THRESHOLD = 3.0
SPECIES_ELITISM = 2  # Top individuals per species are preserved
RECENT_ACTIONS_HISTORY = 5  # Number of recent actions to track

# Named tuple to represent point
Point = namedtuple("Point", "x, y")

def save_genome(genome, filename):
    with open(filename, 'wb') as f:
        pickle.dump(genome, f)

def load_genome(filename):
    with open(filename, 'rb') as f:
        return pickle.load(f)

def evaluate_fitness(genome):
    game = SnakeGame()
    total_score = 0
    survival_bonus = 0

    # Initialize the action history
    recent_actions = []

    # Initial distance to food
    head = game.snake[0]
    initial_distance = np.sqrt((head.x - game.food.x) ** 2 + (head.y - game.food.y) ** 2)

    while game.steps < MAX_STEPS:
        state = game.get_state()
        action = np.argmax(genome.forward(state))
        
        # Penalize for repeating actions
        if len(recent_actions) > 0 and action == recent_actions[-1]:
            total_score -= 0.5  # Small penalty for repeating the same action

        # Update the action history
        recent_actions.append(action)
        if len(recent_actions) > RECENT_ACTIONS_HISTORY:
            recent_actions.pop(0)  # Keep only the last N actions

        done, score = game.play_step(action)

        if done:
            break
        
        # Update total score and survival bonus
        total_score += score
        survival_bonus += 1  # Bonus for surviving longer
        
        # Calculate new distance to food
        head = game.snake[0]
        new_distance = np.sqrt((head.x - game.food.x) ** 2 + (head.y - game.food.y) ** 2)

        # Reward for moving closer to the food
        if new_distance < initial_distance:
            total_score += 1  # Increase reward for getting closer
        else:
            total_score -= 0.5  # Small penalty for moving away
        
        initial_distance = new_distance  # Update initial distance for next iteration

    # Fitness as a weighted sum of survival and score
    return total_score + 0.1 * survival_bonus

# Genome Class with Speciation and Compatibility
class Genome:
    innovation_counter = 0  # Global innovation number counter
    
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        self.weights_input_hidden = np.random.uniform(-1, 1, (input_size, hidden_size))
        self.weights_hidden_output = np.random.uniform(-1, 1, (hidden_size, output_size))
        self.connections = []  # Track connection genes (with innovation numbers)
        self.fitness = 0
        self.species_id = None

    def mutate(self):
        # Mutate weights
        for matrix in [self.weights_input_hidden, self.weights_hidden_output]:
            for i in range(matrix.shape[0]):
                for j in range(matrix.shape[1]):
                    if random.random() < INITIAL_MUTATION_RATE:
                        matrix[i][j] += np.random.uniform(-0.5, 0.5)

        # Add new connection or node mutation
        if random.random() < INITIAL_MUTATION_RATE:
            if random.random() < 0.5:
                self.add_connection_mutation()
            else:
                self.add_node_mutation()

    def add_connection_mutation(self):
        # Randomly add a new connection with a unique innovation number
        input_neuron = random.randint(0, self.input_size - 1)
        output_neuron = random.randint(0, self.hidden_size - 1)
        self.connections.append((input_neuron, output_neuron, Genome.innovation_counter))
        Genome.innovation_counter += 1

    def add_node_mutation(self):
        # Randomly split an existing connection by adding a new node
        if self.connections:
            conn = random.choice(self.connections)
            input_neuron, output_neuron, _ = conn
            self.hidden_size += 1
            new_weights = np.random.uniform(-1, 1, (self.hidden_size, self.output_size))
            self.weights_hidden_output = np.concatenate((self.weights_hidden_output, new_weights), axis=0)

    def crossover(self, other):
        child = Genome(self.input_size, self.hidden_size, self.output_size)
        child.weights_input_hidden = np.where(np.random.rand(*self.weights_input_hidden.shape) < 0.5,
                                              self.weights_input_hidden, other.weights_input_hidden)
        child.weights_hidden_output = np.where(np.random.rand(*self.weights_hidden_output.shape) < 0.5,
                                               self.weights_hidden_output, other.weights_hidden_output)
        return child
    
  
    def forward(self, inputs):
        hidden_layer = np.dot(inputs, self.weights_input_hidden)
        hidden_layer_activation = np.tanh(hidden_layer)
        output_layer = np.dot(hidden_layer_activation, self.weights_hidden_output)
        return np.tanh(output_layer)

    def compatibility_distance(self, other):
        # Calculate genetic distance (based on innovation numbers)
        matching_genes = sum(1 for conn in self.connections if conn in other.connections)
        excess_genes = len(self.connections) + len(other.connections) - 2 * matching_genes
        return excess_genes

# Snake Game Class
class SnakeGame:
    def __init__(self):
        self.reset()

    def reset(self):
        self.snake = [Point(GRID_SIZE // 2, GRID_SIZE // 2)]
        self.direction = Point(0, 1)
        self.food = self.place_food()
        self.score = 0
        self.steps = 0

    def place_food(self):
        x, y = random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1)
        while Point(x, y) in self.snake:
            x, y = random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1)
        return Point(x, y)

    def play_step(self, action):
        if action == 0:  # Straight
            pass
        elif action == 1:  # Left turn
            self.direction = Point(-self.direction.y, self.direction.x)
        elif action == 2:  # Right turn
            self.direction = Point(self.direction.y, -self.direction.x)

        # Move snake
        new_head = Point(self.snake[0].x + self.direction.x, self.snake[0].y + self.direction.y)
        self.snake = [new_head] + self.snake[:-1]

        # Check for collisions
        if (new_head.x < 0 or new_head.x >= GRID_SIZE or
            new_head.y < 0 or new_head.y >= GRID_SIZE or
            new_head in self.snake[1:]):
            return True, self.score  # Game over

        # Check for food
        if new_head == self.food:
            self.snake.append(self.snake[-1])
            self.food = self.place_food()
            self.score += 1
            self.steps = 0  # Reset steps counter

        # Increment steps
        self.steps += 1
        return False, self.score  # Game not over

    def get_state(self):
        head = self.snake[0]
        state = [
            # Danger straight, left, right
            self.check_collision(Point(head.x + self.direction.x, head.y + self.direction.y)),
            self.check_collision(Point(head.x - self.direction.y, head.y + self.direction.x)),
            self.check_collision(Point(head.x + self.direction.y, head.y - self.direction.x)),
            # Food location relative to head
            self.food.x < head.x,  # Food left
            self.food.x > head.x,  # Food right
            self.food.y < head.y,  # Food above
            self.food.y > head.y   # Food below
        ]
        return np.array(state, dtype=int)

    def check_collision(self, point):
        return (point.x < 0 or point.x >= GRID_SIZE or
                point.y < 0 or point.y >= GRID_SIZE or
                point in self.snake)

# Evolutionary Algorithm with Speciation
def speciate_population(population):
    species = defaultdict(list)
    for genome in population:
        found_species = False
        for other_genome in species.keys():
            if genome.compatibility_distance(other_genome) < COMPATIBILITY_THRESHOLD:
                species[other_genome].append(genome)
                found_species = True
                break
        if not found_species:
            species[genome] = [genome]
    return species

def evolve_population(population):
    species = speciate_population(population)
    new_population = []

    for specie, genomes in species.items():
        genomes.sort(key=lambda g: g.fitness, reverse=True)  # Sort by fitness
        new_population.extend(genomes[:SPECIES_ELITISM])  # Keep top performers

        # Create offspring through crossover
        while len(new_population) < POPULATION_SIZE:
            parent1, parent2 = random.choices(genomes[:len(genomes)//2], k=2)
            child = parent1.crossover(parent2)
            child.mutate()
            new_population.append(child)

    return new_population[:POPULATION_SIZE]  # Ensure population size is maintained

# Run Evolution and Game
def run_evolution():
    population = [Genome(7, 10, 3) for _ in range(POPULATION_SIZE)]
    best_genome = None
    best_fitness = 0

    for generation in range(GENERATIONS):
        for genome in population:
            genome.fitness = evaluate_fitness(genome)

        population = evolve_population(population)
        generation_best_fitness = max(genome.fitness for genome in population)
        print(f"Generation {generation + 1}, Best Fitness: {generation_best_fitness}")

        # Track the best genome
        if generation_best_fitness > best_fitness:
            best_fitness = generation_best_fitness
            best_genome = population[np.argmax([genome.fitness for genome in population])]

    return best_genome 

# Function to run the best genome in the Snake game
def play_with_best_genome(best_genome):
    game = SnakeGame()
    pygame.init()
    screen = pygame.display.set_mode((GRID_SIZE * CELL_SIZE, GRID_SIZE * CELL_SIZE))
    pygame.display.set_caption('Snake Game - Best Genome')
    
    running = True
    while running:
        state = game.get_state()
        action = np.argmax(best_genome.forward(state))
        done, score = game.play_step(action)

        screen.fill((0, 0, 0))
        for segment in game.snake:
            pygame.draw.rect(screen, (0, 255, 0), (segment.x * CELL_SIZE, segment.y * CELL_SIZE, CELL_SIZE, CELL_SIZE))
        pygame.draw.rect(screen, (255, 0, 0), (game.food.x * CELL_SIZE, game.food.y * CELL_SIZE, CELL_SIZE, CELL_SIZE))
        
        pygame.display.flip()
        pygame.time.delay(100)  # Control game speed

        if done:
            print("Game Over! Final Score:", score)
            running = False
            game.reset()


if __name__ == "__main__":
    best_genome = run_evolution()
    #best_genome = load_genome("best2.obj")
    save_genome(best_genome, "best3.obj")
    play_with_best_genome(best_genome)

